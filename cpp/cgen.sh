#!/bin/bash

# This script is used to generate a C++ project
# with conan and cmake.
# Written by: utfeight
# Date: 2023-07-23
# Version: 0.1.0
# License: MIT
#
# Usage: ./cgen.sh <project_name>
# Example: ./cgen.sh my_project
#
# This will generate a project named my_project
# with a conanfile.py and a CMakeLists.txt.
# You can use conan to install dependencies and
# cmake to build the project.
#
# Credits:
#   - cpp-templat       : https://github.com/filipdutescu/modern-cpp-template/
#   - readme-template   : https://github.com/othneildrew/Best-README-Template/

# Help message
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
	# Non colorized:
	# echo "Usage: cgen <project_name>"
	# echo ""
	# echo "--install        : Install cgen to /usr/local/bin"
	# echo "--install --force: Override cgen to /usr/local/bin"

	# Colorized vibrantly:
	# with the same text above
	echo -e "\033[32mUsage: cgen <project_name>\033[0m"
	echo ""
	echo -e "\033[32m\033[36m--install\033[0m        : Install cgen to /usr/local/bin"
	echo -e "\033[32m\033[36m--install --force\033[0m: Override cgen to /usr/local/bin"
	exit 0

fi

# If you want to use this script anywhere, you can
# INSTALL (symlink) cgen (this script) if not exists in /usr/local/bin
# when the first argument is --install
# Usage: ./cgen.sh --install

if [ "$1" = "--install" ]; then
	if [ "$2" = "--force" ]; then
		echo -e "\033[36mForce installing cgen to /usr/local/bin\033[0m"
		sudo ln -sf "$(pwd)/cgen.sh" /usr/local/bin/cgen || exit 1
		echo -e "\033[32m\033[32mSuccess!\033[0m"
		exit 0
	fi
	if [ ! -f "/usr/local/bin/cgen" ]; then
		sudo cp "$(pwd)/cgen.sh" /usr/local/bin/cgen || exit 1
		exit 0
	else
		# Colorize the output with red, green and default
		echo -e "\033[31m/usr/local/bin/cgen already exists.\033[0m use \033[32m--install --force\033[0m to override."
		exit 1
	fi

# Using --force with --install will override the existing cgen in /usr/local/bin
elif [ "$1" = "--force" ] && [ "$2" = "--install" ]; then
	echo -e "\033[36mForce installing cgen to /usr/local/bin\033[0m"
	sudo ln -sf "$(pwd)/cgen.sh" /usr/local/bin/cgen || exit 1
	echo -e "\033[32m\033[32mSuccess!\033[0m"
	exit 0
fi

project_name=$1

# If the first argument is empty, exit
if [ -z "$project_name" ]; then
	echo -e "\033[31mSpecify a project name\033[0m"
fi

mkdir "$project_name"
cd "$project_name" || exit

conan new "$project_name"/0.1.0 --template=cmake_exe

mkdir build || exit
cd build || exit
conan install .. --build=missing

cd .. || exit

# LICENSE of the $project_name in one line
echo -n "LICENSE for $project_name: "
read -r license
sed -i 's/<Put the package license here>/'"$license"'/g' conanfile.py

# Author of the $project_name
echo -n "Author of $project_name: "
read -r author
sed -i 's/<Put your name here>/'"$author"'/g' conanfile.py

# Gmail of the $author
echo -n "Gmail of the $author (Enter to pass): "
read -r gmail
if [ -n "$gmail" ]; then
	sed -i 's/<And your email here>/'"$gmail"'/g' conanfile.py
fi

# URL of the $project_name
echo -n "URL of $project_name (Enter to pass): "
read -r url
if [ -n "$url" ]; then
	sed -i 's/<Package recipe repository url here, for issues about the package>/'"$url"'/g' conanfile.py
fi

# Description of the $project_name
echo -n "Description of $project_name: "
read -r description
sed -i "s#<Description of $project_name here>""#$description#gi" conanfile.py
# If that fails, use another delimiter instead
if [ $? -ne 0 ]; then
	sed -i "s/<Description of $project_name here>/$description/g" conanfile.py
fi

# Topics of the $project_name
echo -n "Topics of $project_name (Seperate by spaces, Enter to pass): "
read -r topics
# split spaces
IFS=' ' read -r -a array <<<"$topics"

# Print the array, seperated with commas
topics_str=""
for element in "${array[@]}"; do
	topics_str+="\"$element\", "
done
topics_str=${topics_str::-2} # remove the last comma and space

sed -i 's/\"<Put some tag here>\", \"<here>\", \"<and here>\"/'"$topics_str"'/g' conanfile.py

# os, copiler, build_type, arch
echo -n "OS: "
read -r os
sed -i 's/"os"/'\""$os"\"'/g' conanfile.py

echo -n "Compiler: "
read -r compiler
sed -i 's/"compiler"/'\""$compiler"\"'/g' conanfile.py

echo -n "Build type: "
read -r build_type
sed -i 's/"build_type"/'\""$build_type"\"'/g' conanfile.py

echo -n "Arch: "
read -r arch
sed -i 's/"arch"/'\""$arch"\"'/g' conanfile.py
echo -e "\033[32m\033[32mPreferences set succesfully!\033[0m"

# Write .gitingore for future build mess
echo -e "\033[36mAdding .gitingore\033[0m"
echo "
[Bb]uild/*
[Dd]ocs/*
CMakeCache.*
CMakeFiles/*
[Tt]esting/*

### VisualStudioCode ###
.vscode/*
.vscode/settings.json
.vscode/tasks.json
.vscode/launch.json
.vscode/extensions.json

### VisualStudioCode Patch ###
# Ignore all local history of files
.history

### VisualStudio ###
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

# Mono auto generated files
mono_crash.*

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/

# Visual Studio 2015/2017 cache/options directory
.vs/
# Uncomment if you have tasks that create the project's static files in wwwroot
#wwwroot/

# Visual Studio 2017 auto generated files
Generated\ Files/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUnit
*.VisualState.xml
TestResult.xml
nunit-*.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
*_i.c
*_p.c
*_h.h
*.ilk
*.obj
*.iobj
*.pch
*.pdb
*.ipdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*_wpftmp.csproj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db
*.VC.VC.opendb

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# Visual Studio Trace Files
*.e2e

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# JustCode is a .NET coding add-in
.JustCode

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# AxoCover is a Code Coverage Tool
.axoCover/*
!.axoCover/settings.json

# Visual Studio code coverage results
*.coverage
*.coveragexml

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted
PublishScripts/

# NuGet Packages
*.nupkg
# NuGet Symbol Packages
*.snupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/[Pp]ackages/repositories.config
# NuGet v3's project.json files produces more ignorable files
*.nuget.props
*.nuget.targets

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directories and files
AppPackages/
BundleArtifacts/
Package.StoreAssociation.xml
_pkginfo.txt
*.appx
*.appxbundle
*.appxupload

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!?*.[Cc]ache/

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.jfm
*.pfx
*.publishsettings
orleans.codegen.cs

#KDevelop
*.kdev4
.kdev4/*

# Including strong name files can present a security risk
# (https://github.com/github/gitignore/pull/2483#issue-259490424)
#*.snk

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
#bower_components/

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm
ServiceFabricBackup/
*.rptproj.bak

# SQL Server files
*.mdf
*.ldf
*.ndf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings
*.rptproj.rsuser
*- [Bb]ackup.rdl
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup ([0-9][0-9]).rdl

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat
node_modules/

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
*.vbw

# Visual Studio LightSwitch build output
**/*.HTMLClient/GeneratedArtifacts
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
_Pvt_Extensions

# Paket dependency manager
.paket/paket.exe
paket-files/

# FAKE - F# Make
.fake/

# CodeRush personal settings
.cr/personal

# Python Tools for Visual Studio (PTVS)
__pycache__/
*.pyc

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio
*.tss

# Telerik's JustMock configuration file
*.jmconfig

# BizTalk build output
*.btp.cs
*.btm.cs
*.odx.cs
*.xsd.cs

# OpenCover UI analysis results
OpenCover/

# Azure Stream Analytics local run output
ASALocalRun/

# MSBuild Binary and Structured Log
*.binlog

# NVidia Nsight GPU debugger configuration file
*.nvuser

# MFractors (Xamarin productivity tool) working folder
.mfractor/

# Local History for Visual Studio
.localhistory/

# BeatPulse healthcheck temp database
healthchecksdb

# Backup folder for Package Reference Convert tool in Visual Studio 2017
MigrationBackup/
  " >.gitignore

# Add github file template:
# |- May Include:
# |  |- README.mk
# |  |- CHANGELOG.mk
# |  |- LICENSE
# |  |- .gitignore
# |  |- .gitattributes
# |  |- .clang-format
# |  |- .clang-tidy
# |  |- .github/
# |  |  |- ISSUE_TEMPLATE/
# |  |  |  |- bug_report.md
# |  |  |  |- feature_request.md

echo -n "Do you want to add github file template? (y/n): "
read -r github_template

echo -e "\033[36mAdding github template\033[0m"
if [ "$github_template" = "y" ]; then
	# Colorized prompt
	echo -e "\033[32m\033[31mAdding github file template...\033[0m"
	git clone https://github.com/othneildrew/Best-README-Template.git tmp
	cd tmp || exit
	rm -rf .git
	rm README.md
	mv BLANK_README.md README.md
	mv LICENSE.txt LICENSE # I prefer this way
	mv ./* ..
	cd ..
	rm -rf tmp
	echo -e "\033[32m\033[32mSuccess!\033[0m"
fi

# Add .clang-format and .clang-tidy
echo -n "Do you want to add .clang-format and .clang-tidy? (y/n, Enter to pass): "
read -r clang_format_tidy

if [ "$clang_format_tidy" = "y" ]; then
	# Colorized prompt
	echo -e "\033[36mAdding .clang-tidy.\033[0m"
	echo "---
  Checks: '*,-fuchsia-*,-google-*,-zircon-*,-abseil-*,-modernize-use-trailing-return-type,-llvm-*,-llvmlibc-*'
  CheckOptions: [{ key: misc-non-private-member-variables-in-classes, value: IgnoreClassesWithAllMemberVariablesBeingPublic }]
  WarningsAsErrors: '*'
  HeaderFilterRegex: ''
  FormatStyle: none
  " >.clang-tidy

	echo -e "\033[36mAdding .clang-format.\033[0m"
	echo "---
  BasedOnStyle: Google
  AlignAfterOpenBracket: 'AlwaysBreak'
  AllowAllConstructorInitializersOnNextLine: 'false'
  AllowAllParametersOfDeclarationOnNextLine: 'false'
  AlignConsecutiveMacros: 'true'
  AllowShortCaseLabelsOnASingleLine: 'true'
  AllowShortFunctionsOnASingleLine: 'None'
  AllowShortIfStatementsOnASingleLine: 'Never'
  AllowShortLoopsOnASingleLine: 'false'
  BreakBeforeBraces: Allman
  BinPackArguments: 'false'
  BinPackParameters: 'false'
  Cpp11BracedListStyle: 'false'
  ColumnLimit: 125 
  NamespaceIndentation: All
  SpaceAfterTemplateKeyword: 'false'
  SpaceBeforeCtorInitializerColon: 'true'
  SpaceBeforeInheritanceColon: 'true'
  SpaceBeforeParens: ControlStatements
  SpaceBeforeRangeBasedForLoopColon: 'true'
  SpaceInEmptyBlock: true
  Standard: 'Latest'
  ...
  " >.clang-format
	echo -e "\033[32m\033[32mSuccess!\033[0m"
fi

# Dockerfile Integration
echo -n "Do you want to add Dockerfile? (y/n, Enter to pass): "
read -r dockerfile

if [ "$dockerfile" = "y" ]; then
	# Colorized prompt
	echo -e "\033[36mAdding Dockerfile.\033[0m"
	echo "FROM ubuntu:18.04

  RUN echo \"Updating Ubuntu  \"
  RUN apt-get update && apt  -get upgrade -y

  RUN echo \"Installing depe  ndencies...\"
  RUN apt install -y \
        ccache \
        clang \
        clang-format \
        clang-tidy \
        cppcheck \
        curl \
        doxygen \
        gcc \
        git \
        graphviz \
        make \
        ninja-build \
        python3 \
        python3-pip \
        tar \
        unzip \
        vim

  RUN echo \"Installing depe  ndencies not found in the package repos...\"

  RUN apt install -y wget t  ar build-essential libssl-dev && \
        wget https://github  .com/Kitware/CMake/releases/download/v3.15.0/cmake-3.15.0.tar.gz && \
        tar -zxvf cmake-3.1  5.0.tar.gz && \
        cd cmake-3.15.0 &&   \
        ./bootstrap && \
        make && \
        make install 

  RUN pip3 install conan

  RUN git clone https://git  hub.com/catchorg/Catch2.git && \
       cd Catch2 && \
       cmake -Bbuild -H. -D  BUILD_TESTING=OFF && \
       cmake --build build/   --target install

  # Disabled pthread suppor  t for GTest due to linking errors
  RUN git clone https://git  hub.com/google/googletest.git --branch release-1.10.0 && \
          cd googletest &&   \
          cmake -Bbuild -Dg  test_disable_pthreads=1 && \
          cmake --build bui  ld --config Release && \
          cmake --build bui  ld --target install --config Release

  RUN git clone https://git  hub.com/microsoft/vcpkg -b 2020.06 && \
      cd vcpkg && \
      ./bootstrap-vcpkg.sh   -disableMetrics -useSystemBinaries
  " >Dockerfile
	echo -e "\033[32m\033[32mSuccess!\033[0m"
	# Note: AI generated:
	# To build a package:
	# docker build -t <image_name> .
	# docker run -it <image_name> /bin/bash
fi

# I use neovim with clangd lsp, this is used to
# generate compile_commands.json which makes sure
# lsp knows where to look for header files.
cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1
